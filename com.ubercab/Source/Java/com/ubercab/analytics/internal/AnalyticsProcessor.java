package com.ubercab.analytics.internal;

import com.google.auto.service.AutoService;
import com.squareup.javawriter.JavaWriter;
import com.ubercab.analytics.annotations.AnalyticsName;
import com.ubercab.analytics.internal.writers.AnalyticsWriter;
import com.ubercab.analytics.internal.writers.UberSupportViewWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;

@AutoService(Processor.class)
public class AnalyticsProcessor extends AbstractProcessor
{
  private static final String ANALYTICS_CLASS = "com.ubercab.library.metrics.analytics.Analytics";
  private static final String ANALYTICS_CLIENT_CLASS = "com.ubercab.library.metrics.analytics.AnalyticsClient";
  private static final String ANDROID_VIEW_CLASS = "android.view.View";
  private static final String FILE_COMMENT = "Do not modify, code generated by analytics annotation processor.";
  public static final String SUFFIX = "$$AnalyticsInjector";
  private Filer mFiler;
  private ProcessorUtils mProcessorUtils;

  private void processUberSupportViewWritter(Element paramElement, TypeElement paramTypeElement, Map<TypeElement, Set<AnalyticsWriter>> paramMap)
  {
    if (UberSupportViewWriter.accepts(paramElement, this.mProcessorUtils))
    {
      UberSupportViewWriter.validate(paramElement, this.mProcessorUtils);
      if (!paramMap.containsKey(paramTypeElement))
        paramMap.put(paramTypeElement, new LinkedHashSet());
      ((Set)paramMap.get(paramTypeElement)).add(new UberSupportViewWriter(paramElement));
    }
  }

  public Set<String> getSupportedAnnotationTypes()
  {
    return Collections.singleton(AnalyticsName.class.getName());
  }

  public SourceVersion getSupportedSourceVersion()
  {
    return SourceVersion.latestSupported();
  }

  public void init(ProcessingEnvironment paramProcessingEnvironment)
  {
    try
    {
      super.init(paramProcessingEnvironment);
      this.mProcessorUtils = new ProcessorUtils(paramProcessingEnvironment);
      this.mFiler = paramProcessingEnvironment.getFiler();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }

  public boolean process(Set<? extends TypeElement> paramSet, RoundEnvironment paramRoundEnvironment)
  {
    Set localSet = paramRoundEnvironment.getElementsAnnotatedWith(AnalyticsName.class);
    HashMap localHashMap = new HashMap();
    Iterator localIterator1 = localSet.iterator();
    while (localIterator1.hasNext())
    {
      Element localElement = (Element)localIterator1.next();
      processUberSupportViewWritter(localElement, (TypeElement)localElement.getEnclosingElement(), localHashMap);
    }
    Iterator localIterator2 = localHashMap.keySet().iterator();
    while (localIterator2.hasNext())
    {
      TypeElement localTypeElement = (TypeElement)localIterator2.next();
      String str1 = this.mProcessorUtils.getPackageName(localTypeElement);
      String str2 = this.mProcessorUtils.getClassName(localTypeElement);
      String str3 = str2 + "$$AnalyticsInjector";
      Writer localWriter;
      JavaWriter localJavaWriter;
      try
      {
        localWriter = this.mFiler.createSourceFile(str1 + "." + str3, new Element[] { localTypeElement }).openWriter();
        localJavaWriter = new JavaWriter(localWriter);
        localJavaWriter.emitSingleLineComment("Do not modify, code generated by analytics annotation processor.", new Object[0]);
        localJavaWriter.emitPackage(str1);
        ArrayList localArrayList = new ArrayList(Arrays.asList(new String[] { "com.ubercab.library.metrics.analytics.Analytics", "com.ubercab.library.metrics.analytics.AnalyticsClient", "android.view.View" }));
        localArrayList.addAll(UberSupportViewWriter.getImports());
        localJavaWriter.emitImports(localArrayList);
        localJavaWriter.beginType(str3, "class", EnumSet.of(Modifier.PUBLIC, Modifier.FINAL));
        localJavaWriter.beginMethod("void", "init", EnumSet.of(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL), new String[] { str2, "container" });
        Iterator localIterator3 = ((Set)localHashMap.get(localTypeElement)).iterator();
        while (localIterator3.hasNext())
          ((AnalyticsWriter)localIterator3.next()).emitStatements(localJavaWriter);
      }
      catch (IOException localIOException)
      {
        ProcessorUtils localProcessorUtils = this.mProcessorUtils;
        Object[] arrayOfObject = new Object[2];
        arrayOfObject[0] = localTypeElement;
        arrayOfObject[1] = localIOException.getMessage();
        localProcessorUtils.error(localTypeElement, "Unable to write injector for type %s: %s", arrayOfObject);
      }
      continue;
      localJavaWriter.endMethod();
      localJavaWriter.endType();
      localWriter.flush();
      localWriter.close();
    }
    return false;
  }
}

/* Location:           M:\Google Play\com.ubercab_dex2jar.jar
 * Qualified Name:     com.ubercab.analytics.internal.AnalyticsProcessor
 * JD-Core Version:    0.6.2
 */