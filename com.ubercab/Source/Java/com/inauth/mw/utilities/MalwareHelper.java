package com.inauth.mw.utilities;

import android.app.Application;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.util.Log;
import com.inauth.utilities.InAuthUtilities;
import com.inauth.utilities.ndk.InAuthNDK;
import com.inauth.utilities.ndk.NDKLog;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

public class MalwareHelper
{
  private static MalwareHelper instance;

  private NDKLog decryptSigfile(String paramString1, String paramString2)
  {
    String str1 = "COMPROMISED";
    int i = 0;
    if (paramString1 != null)
    {
      String str2 = InAuthNDK.getInstance().inAuthMW(paramString1);
      i = InAuthNDK.getInstance().getMalwareReturnCodeNDK();
      if (str2 != null)
        str1 = parseSigfile(str2, paramString2);
    }
    NDKLog localNDKLog = new NDKLog();
    localNDKLog.setDecryptedList(str1);
    localNDKLog.setReasonCode(i);
    return localNDKLog;
  }

  private List<String> findMalwares(Application paramApplication, String paramString)
  {
    String[] arrayOfString1 = paramString.split("(\\r|\\n)");
    List localList = paramApplication.getApplicationContext().getPackageManager().getInstalledPackages(0);
    ArrayList localArrayList = new ArrayList();
    for (int i = 1; i < arrayOfString1.length; i++)
    {
      String[] arrayOfString2 = arrayOfString1[i].split(";");
      int j = 0;
      if (j < localList.size())
      {
        PackageInfo localPackageInfo = (PackageInfo)localList.get(j);
        String str;
        if (localPackageInfo.packageName.equals(arrayOfString2[0]))
        {
          str = InAuthUtilities.fileToMD5(localPackageInfo.applicationInfo.sourceDir);
          if (str != null)
            break label118;
        }
        while (true)
        {
          j++;
          break;
          label118: if (str.equals(arrayOfString2[1]))
            localArrayList.add(arrayOfString1[i]);
        }
      }
    }
    return localArrayList;
  }

  private static InputStream getInputStreamFromUrl(String paramString)
  {
    try
    {
      InputStream localInputStream = new DefaultHttpClient().execute(new HttpGet(paramString)).getEntity().getContent();
      return localInputStream;
    }
    catch (Exception localException)
    {
      Log.e("[GET REQUEST]", "Network exception");
    }
    return null;
  }

  public static MalwareHelper getInstance()
  {
    if (instance == null)
      instance = new MalwareHelper();
    return instance;
  }

  private JSONObject getValidation(String paramString1, String paramString2, String paramString3, String paramString4)
    throws IOException, JSONException
  {
    if (new File(paramString1).exists())
    {
      String str1 = getSigfileVersion(paramString1);
      String str2 = paramString3 + "/sigfile/status/android?account_guid=" + paramString2 + "&type=malware&version=" + str1;
      InputStream localInputStream = getInputStreamFromUrl(str2);
      JSONObject localJSONObject = null;
      if (localInputStream != null)
      {
        Log.e("mwfile version", str1);
        Log.e("URL sent", str2);
        try
        {
          BufferedReader localBufferedReader1 = new BufferedReader(new InputStreamReader(localInputStream, "UTF-8"));
          localBufferedReader2 = localBufferedReader1;
          localStringBuilder = new StringBuilder();
          while (true)
          {
            String str3 = localBufferedReader2.readLine();
            if (str3 == null)
              break;
            localStringBuilder.append(str3);
          }
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException)
        {
          StringBuilder localStringBuilder;
          while (true)
          {
            Log.e("Error", "UnsupportedEncodingException");
            localUnsupportedEncodingException.printStackTrace();
            BufferedReader localBufferedReader2 = null;
          }
          localJSONObject = new JSONObject(localStringBuilder.toString());
        }
      }
      return localJSONObject;
    }
    Log.e("File path Error", paramString1);
    return null;
  }

  private String parseSigfile(String paramString1, String paramString2)
  {
    String str = "";
    String[] arrayOfString1 = paramString1.split("#####");
    String[] arrayOfString2 = arrayOfString1[0].split("(\\r|\\n)");
    if ("GET_SIGFILE_VERSION".equals(paramString2))
      str = arrayOfString2[0];
    if ("GET_MALWARE_LIST".equals(paramString2))
      str = arrayOfString1[1];
    return str;
  }

  public MalwareLog getMalwareLog(Application paramApplication, String paramString)
  {
    String str1 = "COMPROMISED";
    String str2 = "MISSING_SIGFILE";
    Object localObject = new ArrayList();
    if (InAuthUtilities.doesFileExist(paramString))
    {
      NDKLog localNDKLog = decryptSigfile(paramString, "GET_MALWARE_LIST");
      if ((localNDKLog.getDecryptedList() != null) && (!"COMPROMISED".equals(localNDKLog.getDecryptedList())))
      {
        localObject = findMalwares(paramApplication, localNDKLog.getDecryptedList());
        str2 = localNDKLog.getReasonCode();
        if (((List)localObject).size() != 0)
          break label117;
      }
    }
    label117: for (str1 = "NO_MALWARE_FOUND"; ; str1 = "MALWARE_FOUND")
    {
      MalwareLog localMalwareLog = new MalwareLog();
      localMalwareLog.setMalwareStatus(str1);
      localMalwareLog.setMalwareReasonCode(str2);
      localMalwareLog.addMalwareList((List)localObject);
      return localMalwareLog;
    }
  }

  public String getSigfileVersion(String paramString)
  {
    String str = "MISSING_SIGFILE";
    if (InAuthUtilities.doesFileExist(paramString))
    {
      NDKLog localNDKLog = decryptSigfile(paramString, "GET_SIGFILE_VERSION");
      if (str != null)
        str = localNDKLog.getDecryptedList();
    }
    return str;
  }

  public String updateSignatureFile(String paramString1, String paramString2, String paramString3)
  {
    Future localFuture = Executors.newFixedThreadPool(1).submit(new HttpCall(paramString1, paramString2, paramString3));
    try
    {
      String str = (String)localFuture.get();
      return str;
    }
    catch (Exception localException)
    {
      Log.e("update malware sigfile", "response error");
    }
    return "INTERNAL_ERROR";
  }

  private class HttpCall
    implements Callable<String>
  {
    private final String accountGUID;
    private final String filePath;
    private final String serverURL;
    private String updateSignatureFileResponse = "";

    HttpCall(String paramString1, String paramString2, String arg4)
    {
      this.filePath = paramString1;
      this.accountGUID = paramString2;
      Object localObject;
      this.serverURL = localObject;
    }

    // ERROR //
    public String call()
    {
      // Byte code:
      //   0: aconst_null
      //   1: astore_1
      //   2: aload_0
      //   3: getfield 18	com/inauth/mw/utilities/MalwareHelper$HttpCall:this$0	Lcom/inauth/mw/utilities/MalwareHelper;
      //   6: aload_0
      //   7: getfield 27	com/inauth/mw/utilities/MalwareHelper$HttpCall:filePath	Ljava/lang/String;
      //   10: aload_0
      //   11: getfield 29	com/inauth/mw/utilities/MalwareHelper$HttpCall:accountGUID	Ljava/lang/String;
      //   14: aload_0
      //   15: getfield 31	com/inauth/mw/utilities/MalwareHelper$HttpCall:serverURL	Ljava/lang/String;
      //   18: aload_0
      //   19: getfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   22: invokestatic 48	com/inauth/mw/utilities/MalwareHelper:access$000	(Lcom/inauth/mw/utilities/MalwareHelper;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/json/JSONObject;
      //   25: astore 10
      //   27: aconst_null
      //   28: astore_1
      //   29: aload 10
      //   31: ifnull +238 -> 269
      //   34: aload 10
      //   36: ldc 50
      //   38: invokevirtual 56	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   41: astore 11
      //   43: aload 11
      //   45: ifnull +27 -> 72
      //   48: aload 11
      //   50: ldc 58
      //   52: invokevirtual 64	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   55: ifeq +17 -> 72
      //   58: aload_0
      //   59: ldc 66
      //   61: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   64: ldc 50
      //   66: ldc 58
      //   68: invokestatic 72	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   71: pop
      //   72: aconst_null
      //   73: astore_1
      //   74: aload 11
      //   76: ifnull +193 -> 269
      //   79: aload 11
      //   81: ldc 74
      //   83: invokevirtual 64	java/lang/String:equals	(Ljava/lang/Object;)Z
      //   86: istore 12
      //   88: aconst_null
      //   89: astore_1
      //   90: iload 12
      //   92: ifeq +177 -> 269
      //   95: aload 10
      //   97: ldc 76
      //   99: invokevirtual 56	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
      //   102: astore 13
      //   104: ldc 50
      //   106: new 78	java/lang/StringBuilder
      //   109: dup
      //   110: invokespecial 79	java/lang/StringBuilder:<init>	()V
      //   113: ldc 81
      //   115: invokevirtual 85	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   118: aload 13
      //   120: invokevirtual 85	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
      //   123: invokevirtual 88	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   126: invokestatic 72	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   129: pop
      //   130: aload 13
      //   132: invokestatic 92	com/inauth/mw/utilities/MalwareHelper:access$100	(Ljava/lang/String;)Ljava/io/InputStream;
      //   135: astore 15
      //   137: aconst_null
      //   138: astore_1
      //   139: aload 15
      //   141: ifnull +154 -> 295
      //   144: new 94	java/io/BufferedInputStream
      //   147: dup
      //   148: aload 15
      //   150: invokespecial 97	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
      //   153: astore 16
      //   155: new 99	org/apache/http/util/ByteArrayBuffer
      //   158: dup
      //   159: sipush 5000
      //   162: invokespecial 102	org/apache/http/util/ByteArrayBuffer:<init>	(I)V
      //   165: astore 17
      //   167: aload 16
      //   169: invokevirtual 106	java/io/BufferedInputStream:read	()I
      //   172: istore 18
      //   174: iload 18
      //   176: iconst_m1
      //   177: if_icmpeq +52 -> 229
      //   180: aload 17
      //   182: iload 18
      //   184: i2b
      //   185: invokevirtual 108	org/apache/http/util/ByteArrayBuffer:append	(I)V
      //   188: goto -21 -> 167
      //   191: astore 7
      //   193: aload_0
      //   194: ldc 110
      //   196: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   199: ldc 112
      //   201: ldc 114
      //   203: invokestatic 72	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   206: pop
      //   207: aload 7
      //   209: invokevirtual 117	java/io/IOException:printStackTrace	()V
      //   212: aload_1
      //   213: ifnull +11 -> 224
      //   216: aload_1
      //   217: invokevirtual 122	java/io/FileOutputStream:flush	()V
      //   220: aload_1
      //   221: invokevirtual 125	java/io/FileOutputStream:close	()V
      //   224: aload_0
      //   225: getfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   228: areturn
      //   229: new 119	java/io/FileOutputStream
      //   232: dup
      //   233: aload_0
      //   234: getfield 27	com/inauth/mw/utilities/MalwareHelper$HttpCall:filePath	Ljava/lang/String;
      //   237: invokespecial 128	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
      //   240: astore 19
      //   242: aload 19
      //   244: aload 17
      //   246: invokevirtual 132	org/apache/http/util/ByteArrayBuffer:toByteArray	()[B
      //   249: invokevirtual 136	java/io/FileOutputStream:write	([B)V
      //   252: aload_0
      //   253: ldc 138
      //   255: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   258: ldc 140
      //   260: ldc 142
      //   262: invokestatic 72	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   265: pop
      //   266: aload 19
      //   268: astore_1
      //   269: aload_1
      //   270: ifnull -46 -> 224
      //   273: aload_1
      //   274: invokevirtual 122	java/io/FileOutputStream:flush	()V
      //   277: aload_1
      //   278: invokevirtual 125	java/io/FileOutputStream:close	()V
      //   281: goto -57 -> 224
      //   284: astore 21
      //   286: aload_0
      //   287: ldc 110
      //   289: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   292: goto -68 -> 224
      //   295: aload_0
      //   296: ldc 110
      //   298: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   301: aconst_null
      //   302: astore_1
      //   303: goto -34 -> 269
      //   306: astore 4
      //   308: aload_0
      //   309: ldc 110
      //   311: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   314: ldc 112
      //   316: ldc 144
      //   318: invokestatic 72	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
      //   321: pop
      //   322: aload 4
      //   324: invokevirtual 145	org/json/JSONException:printStackTrace	()V
      //   327: aload_1
      //   328: ifnull -104 -> 224
      //   331: aload_1
      //   332: invokevirtual 122	java/io/FileOutputStream:flush	()V
      //   335: aload_1
      //   336: invokevirtual 125	java/io/FileOutputStream:close	()V
      //   339: goto -115 -> 224
      //   342: astore 6
      //   344: aload_0
      //   345: ldc 110
      //   347: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   350: goto -126 -> 224
      //   353: astore 9
      //   355: aload_0
      //   356: ldc 110
      //   358: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   361: goto -137 -> 224
      //   364: astore_2
      //   365: aload_1
      //   366: ifnull +11 -> 377
      //   369: aload_1
      //   370: invokevirtual 122	java/io/FileOutputStream:flush	()V
      //   373: aload_1
      //   374: invokevirtual 125	java/io/FileOutputStream:close	()V
      //   377: aload_2
      //   378: athrow
      //   379: astore_3
      //   380: aload_0
      //   381: ldc 110
      //   383: putfield 25	com/inauth/mw/utilities/MalwareHelper$HttpCall:updateSignatureFileResponse	Ljava/lang/String;
      //   386: goto -9 -> 377
      //   389: astore_2
      //   390: aload 19
      //   392: astore_1
      //   393: goto -28 -> 365
      //   396: astore 4
      //   398: aload 19
      //   400: astore_1
      //   401: goto -93 -> 308
      //   404: astore 7
      //   406: aload 19
      //   408: astore_1
      //   409: goto -216 -> 193
      //
      // Exception table:
      //   from	to	target	type
      //   2	27	191	java/io/IOException
      //   34	43	191	java/io/IOException
      //   48	72	191	java/io/IOException
      //   79	88	191	java/io/IOException
      //   95	137	191	java/io/IOException
      //   144	167	191	java/io/IOException
      //   167	174	191	java/io/IOException
      //   180	188	191	java/io/IOException
      //   229	242	191	java/io/IOException
      //   295	301	191	java/io/IOException
      //   273	281	284	java/lang/Exception
      //   2	27	306	org/json/JSONException
      //   34	43	306	org/json/JSONException
      //   48	72	306	org/json/JSONException
      //   79	88	306	org/json/JSONException
      //   95	137	306	org/json/JSONException
      //   144	167	306	org/json/JSONException
      //   167	174	306	org/json/JSONException
      //   180	188	306	org/json/JSONException
      //   229	242	306	org/json/JSONException
      //   295	301	306	org/json/JSONException
      //   331	339	342	java/lang/Exception
      //   216	224	353	java/lang/Exception
      //   2	27	364	finally
      //   34	43	364	finally
      //   48	72	364	finally
      //   79	88	364	finally
      //   95	137	364	finally
      //   144	167	364	finally
      //   167	174	364	finally
      //   180	188	364	finally
      //   193	212	364	finally
      //   229	242	364	finally
      //   295	301	364	finally
      //   308	327	364	finally
      //   369	377	379	java/lang/Exception
      //   242	266	389	finally
      //   242	266	396	org/json/JSONException
      //   242	266	404	java/io/IOException
    }
  }
}

/* Location:           M:\Google Play\com.ubercab_dex2jar.jar
 * Qualified Name:     com.inauth.mw.utilities.MalwareHelper
 * JD-Core Version:    0.6.2
 */